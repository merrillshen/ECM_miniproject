

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Nov 01 16:40:07 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    15  0000                     
    16                           ; Version 2.20
    17                           ; Generated 05/05/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F67K40 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     _ANSELFbits	set	3764
    51  0000                     _ANSELAbits	set	3730
    52  0000                     _ADPCH	set	3935
    53  0000                     _ADREFbits	set	3928
    54  0000                     _TRISBbits	set	3970
    55  0000                     _LATBbits	set	3962
    56  0000                     _TRISFbits	set	3974
    57  0000                     _LATFbits	set	3966
    58  0000                     _LATAbits	set	3961
    59  0000                     _TRISGbits	set	3975
    60  0000                     _LATGbits	set	3967
    61  0000                     _TRISHbits	set	3976
    62  0000                     _LATHbits	set	3968
    63  0000                     _ADRESH	set	3940
    64  0000                     _ADCON0bits	set	3936
    65  0000                     _TRISAbits	set	3969
    66                           
    67                           ; #config settings
    68                           
    69                           	psect	cinit
    70  01FF44                     __pcinit:
    71                           	callstack 0
    72  01FF44                     start_initialization:
    73                           	callstack 0
    74  01FF44                     __initialization:
    75                           	callstack 0
    76  01FF44                     end_of_initialization:
    77                           	callstack 0
    78  01FF44                     __end_of__initialization:
    79                           	callstack 0
    80  01FF44  0100               	movlb	0
    81  01FF46  EFDD  F0FF         	goto	_main	;jump to C main() function
    82                           
    83                           	psect	cstackCOMRAM
    84  000001                     __pcstackCOMRAM:
    85                           	callstack 0
    86  000001                     ?_ADC_getval:
    87                           	callstack 0
    88                           
    89                           ; 2 bytes @ 0x0
    90  000001                     	ds	2
    91  000003                     ADC_getval@tmpval:
    92                           	callstack 0
    93                           
    94                           ; 2 bytes @ 0x2
    95  000003                     	ds	2
    96  000005                     main@set_brightness:
    97                           	callstack 0
    98                           
    99                           ; 2 bytes @ 0x4
   100  000005                     	ds	2
   101  000007                     main@light_strength:
   102                           	callstack 0
   103                           
   104                           ; 2 bytes @ 0x6
   105  000007                     	ds	2
   106                           
   107 ;;
   108 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   109 ;;
   110 ;; *************** function _main *****************
   111 ;; Defined at:
   112 ;;		line 11 in file "main.c"
   113 ;; Parameters:    Size  Location     Type
   114 ;;		None
   115 ;; Auto vars:     Size  Location     Type
   116 ;;  light_streng    2    6[COMRAM] unsigned int 
   117 ;;  set_brightne    2    4[COMRAM] unsigned int 
   118 ;; Return value:  Size  Location     Type
   119 ;;                  1    wreg      void 
   120 ;; Registers used:
   121 ;;		wreg, status,2, status,0, cstack
   122 ;; Tracked objects:
   123 ;;		On entry : 0/0
   124 ;;		On exit  : 0/0
   125 ;;		Unchanged: 0/0
   126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   128 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   130 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   131 ;;Total ram usage:        4 bytes
   132 ;; Hardware stack levels required when called: 1
   133 ;; This function calls:
   134 ;;		_ADC_getval
   135 ;;		_ADC_init
   136 ;;		_LEDarray_init
   137 ;; This function is called by:
   138 ;;		Startup code after reset
   139 ;; This function uses a non-reentrant model
   140 ;;
   141                           
   142                           	psect	text0
   143  01FFBA                     __ptext0:
   144                           	callstack 0
   145  01FFBA                     _main:
   146                           	callstack 30
   147  01FFBA                     
   148                           ;main.c: 14:     LATHbits.LATH3=0;
   149  01FFBA  9680               	bcf	128,3,c	;volatile
   150                           
   151                           ;main.c: 15:     TRISHbits.TRISH3=0;
   152  01FFBC  9688               	bcf	136,3,c	;volatile
   153  01FFBE                     
   154                           ;main.c: 18:     LEDarray_init();
   155  01FFBE  ECB2  F0FF         	call	_LEDarray_init	;wreg free
   156                           
   157                           ;main.c: 19:     ADC_init();
   158  01FFC2  ECA5  F0FF         	call	_ADC_init	;wreg free
   159  01FFC6                     
   160                           ;main.c: 20:     unsigned int set_brightness=50;
   161  01FFC6  0E00               	movlw	0
   162  01FFC8  6E06               	movwf	(main@set_brightness+1)^0,c
   163  01FFCA  0E32               	movlw	50
   164  01FFCC  6E05               	movwf	main@set_brightness^0,c
   165  01FFCE                     l961:
   166                           
   167                           ;main.c: 22:         light_strength = ADC_getval();
   168  01FFCE  ECC5  F0FF         	call	_ADC_getval	;wreg free
   169  01FFD2  C001  F007         	movff	?_ADC_getval,main@light_strength
   170  01FFD6  C002  F008         	movff	?_ADC_getval+1,main@light_strength+1
   171                           
   172                           ;main.c: 23:         if (light_strength >= set_brightness) {
   173  01FFDA  5005               	movf	main@set_brightness^0,w,c
   174  01FFDC  5C07               	subwf	main@light_strength^0,w,c
   175  01FFDE  5006               	movf	(main@set_brightness+1)^0,w,c
   176  01FFE0  5808               	subwfb	(main@light_strength+1)^0,w,c
   177  01FFE2  A0D8               	btfss	status,0,c
   178  01FFE4  EFF6  F0FF         	goto	u501
   179  01FFE8  EFF8  F0FF         	goto	u500
   180  01FFEC                     u501:
   181  01FFEC  EFFB  F0FF         	goto	l37
   182  01FFF0                     u500:
   183  01FFF0                     
   184                           ;main.c: 24:             LATHbits.LATH3 = 0;
   185  01FFF0  9680               	bcf	128,3,c	;volatile
   186                           
   187                           ;main.c: 25:         }
   188  01FFF2  EFE7  F0FF         	goto	l961
   189  01FFF6                     l37:
   190                           
   191                           ;main.c: 27:             LATHbits.LATH3 = 1;
   192  01FFF6  8680               	bsf	128,3,c	;volatile
   193  01FFF8  EFE7  F0FF         	goto	l961
   194  01FFFC  EF00  F000         	goto	start
   195  020000                     __end_of_main:
   196                           	callstack 0
   197                           
   198 ;; *************** function _LEDarray_init *****************
   199 ;; Defined at:
   200 ;;		line 8 in file "LEDarray.c"
   201 ;; Parameters:    Size  Location     Type
   202 ;;		None
   203 ;; Auto vars:     Size  Location     Type
   204 ;;		None
   205 ;; Return value:  Size  Location     Type
   206 ;;                  1    wreg      void 
   207 ;; Registers used:
   208 ;;		None
   209 ;; Tracked objects:
   210 ;;		On entry : 0/0
   211 ;;		On exit  : 0/0
   212 ;;		Unchanged: 0/0
   213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   218 ;;Total ram usage:        0 bytes
   219 ;; Hardware stack levels used: 1
   220 ;; This function calls:
   221 ;;		Nothing
   222 ;; This function is called by:
   223 ;;		_main
   224 ;; This function uses a non-reentrant model
   225 ;;
   226                           
   227                           	psect	text1
   228  01FF64                     __ptext1:
   229                           	callstack 0
   230  01FF64                     _LEDarray_init:
   231                           	callstack 30
   232  01FF64                     
   233                           ;LEDarray.c: 13:     LATGbits.LATG0=0;
   234  01FF64  907F               	bcf	127,0,c	;volatile
   235                           
   236                           ;LEDarray.c: 14:     TRISGbits.TRISG0=0;
   237  01FF66  9087               	bcf	135,0,c	;volatile
   238                           
   239                           ;LEDarray.c: 16:     LATGbits.LATG1=0;
   240  01FF68  927F               	bcf	127,1,c	;volatile
   241                           
   242                           ;LEDarray.c: 17:     TRISGbits.TRISG1=0;
   243  01FF6A  9287               	bcf	135,1,c	;volatile
   244                           
   245                           ;LEDarray.c: 19:     LATAbits.LATA2=0;
   246  01FF6C  9479               	bcf	121,2,c	;volatile
   247                           
   248                           ;LEDarray.c: 20:     TRISAbits.TRISA2=0;
   249  01FF6E  9481               	bcf	129,2,c	;volatile
   250                           
   251                           ;LEDarray.c: 22:     LATFbits.LATF6=0;
   252  01FF70  9C7E               	bcf	126,6,c	;volatile
   253                           
   254                           ;LEDarray.c: 23:     TRISFbits.TRISF6=0;
   255  01FF72  9C86               	bcf	134,6,c	;volatile
   256                           
   257                           ;LEDarray.c: 25:     LATAbits.LATA4=0;
   258  01FF74  9879               	bcf	121,4,c	;volatile
   259                           
   260                           ;LEDarray.c: 26:     TRISAbits.TRISA4=0;
   261  01FF76  9881               	bcf	129,4,c	;volatile
   262                           
   263                           ;LEDarray.c: 28:     LATAbits.LATA5=0;
   264  01FF78  9A79               	bcf	121,5,c	;volatile
   265                           
   266                           ;LEDarray.c: 29:     TRISAbits.TRISA5=0;
   267  01FF7A  9A81               	bcf	129,5,c	;volatile
   268                           
   269                           ;LEDarray.c: 31:     LATFbits.LATF0=0;
   270  01FF7C  907E               	bcf	126,0,c	;volatile
   271                           
   272                           ;LEDarray.c: 32:     TRISFbits.TRISF0=0;
   273  01FF7E  9086               	bcf	134,0,c	;volatile
   274                           
   275                           ;LEDarray.c: 34:     LATBbits.LATB0=0;
   276  01FF80  907A               	bcf	122,0,c	;volatile
   277                           
   278                           ;LEDarray.c: 35:     TRISBbits.TRISB0=0;
   279  01FF82  9082               	bcf	130,0,c	;volatile
   280                           
   281                           ;LEDarray.c: 37:     LATBbits.LATB1=0;
   282  01FF84  927A               	bcf	122,1,c	;volatile
   283                           
   284                           ;LEDarray.c: 38:     TRISBbits.TRISB1=0;
   285  01FF86  9282               	bcf	130,1,c	;volatile
   286  01FF88  0012               	return		;funcret
   287  01FF8A                     __end_of_LEDarray_init:
   288                           	callstack 0
   289                           
   290 ;; *************** function _ADC_init *****************
   291 ;; Defined at:
   292 ;;		line 9 in file "ADC.c"
   293 ;; Parameters:    Size  Location     Type
   294 ;;		None
   295 ;; Auto vars:     Size  Location     Type
   296 ;;		None
   297 ;; Return value:  Size  Location     Type
   298 ;;                  1    wreg      void 
   299 ;; Registers used:
   300 ;;		wreg, status,2
   301 ;; Tracked objects:
   302 ;;		On entry : 0/0
   303 ;;		On exit  : 0/0
   304 ;;		Unchanged: 0/0
   305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   310 ;;Total ram usage:        0 bytes
   311 ;; Hardware stack levels used: 1
   312 ;; This function calls:
   313 ;;		Nothing
   314 ;; This function is called by:
   315 ;;		_main
   316 ;; This function uses a non-reentrant model
   317 ;;
   318                           
   319                           	psect	text2
   320  01FF4A                     __ptext2:
   321                           	callstack 0
   322  01FF4A                     _ADC_init:
   323                           	callstack 30
   324  01FF4A                     
   325                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
   326  01FF4A  8681               	bsf	129,3,c	;volatile
   327                           
   328                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
   329  01FF4C  010E               	movlb	14	; () banked
   330  01FF4E  8792               	bsf	146,3,b	;volatile
   331                           
   332                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
   333  01FF50  010F               	movlb	15	; () banked
   334  01FF52  9958               	bcf	88,4,b	;volatile
   335  01FF54                     
   336                           ; BSR set to: 15
   337                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
   338  01FF54  0EFC               	movlw	-4
   339  01FF56  1758               	andwf	88,f,b	;volatile
   340                           
   341                           ;ADC.c: 17:     ADPCH=0b11;
   342  01FF58  0E03               	movlw	3
   343  01FF5A  6F5F               	movwf	95,b	;volatile
   344  01FF5C                     
   345                           ; BSR set to: 15
   346                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
   347  01FF5C  9460               	bcf	96,2,c	;volatile
   348  01FF5E                     
   349                           ; BSR set to: 15
   350                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
   351  01FF5E  8860               	bsf	96,4,c	;volatile
   352  01FF60                     
   353                           ; BSR set to: 15
   354                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
   355  01FF60  8E60               	bsf	96,7,c	;volatile
   356  01FF62                     
   357                           ; BSR set to: 15
   358  01FF62  0012               	return		;funcret
   359  01FF64                     __end_of_ADC_init:
   360                           	callstack 0
   361                           
   362 ;; *************** function _ADC_getval *****************
   363 ;; Defined at:
   364 ;;		line 23 in file "ADC.c"
   365 ;; Parameters:    Size  Location     Type
   366 ;;		None
   367 ;; Auto vars:     Size  Location     Type
   368 ;;  tmpval          2    2[COMRAM] unsigned int 
   369 ;; Return value:  Size  Location     Type
   370 ;;                  2    0[COMRAM] unsigned int 
   371 ;; Registers used:
   372 ;;		wreg, status,2, status,0
   373 ;; Tracked objects:
   374 ;;		On entry : 0/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   378 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   379 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   381 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   382 ;;Total ram usage:        4 bytes
   383 ;; Hardware stack levels used: 1
   384 ;; This function calls:
   385 ;;		Nothing
   386 ;; This function is called by:
   387 ;;		_main
   388 ;; This function uses a non-reentrant model
   389 ;;
   390                           
   391                           	psect	text3
   392  01FF8A                     __ptext3:
   393                           	callstack 0
   394  01FF8A                     _ADC_getval:
   395                           	callstack 30
   396  01FF8A                     
   397                           ;ADC.c: 25:     unsigned int tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
   398  01FF8A  8060               	bsf	96,0,c	;volatile
   399  01FF8C                     l18:
   400  01FF8C  B060               	btfsc	96,0,c	;volatile
   401  01FF8E  EFCB  F0FF         	goto	u491
   402  01FF92  EFCD  F0FF         	goto	u490
   403  01FF96                     u491:
   404  01FF96  EFC6  F0FF         	goto	l18
   405  01FF9A                     u490:
   406  01FF9A                     
   407                           ;ADC.c: 31:     tmpval = ADRESH;
   408  01FF9A  CF64 F003          	movff	3940,ADC_getval@tmpval	;volatile
   409  01FF9E  6A04               	clrf	(ADC_getval@tmpval+1)^0,c
   410  01FFA0                     
   411                           ;ADC.c: 35:     tmpval = 255 - tmpval;
   412  01FFA0  5003               	movf	ADC_getval@tmpval^0,w,c
   413  01FFA2  08FF               	sublw	255
   414  01FFA4  6E03               	movwf	ADC_getval@tmpval^0,c
   415  01FFA6  5004               	movf	(ADC_getval@tmpval+1)^0,w,c
   416  01FFA8  A0D8               	btfss	status,0,c
   417  01FFAA  2AE8               	incf	wreg,f,c
   418  01FFAC  0800               	sublw	0
   419  01FFAE  6E04               	movwf	(ADC_getval@tmpval+1)^0,c
   420  01FFB0                     
   421                           ;ADC.c: 37:     return tmpval;
   422  01FFB0  C003  F001         	movff	ADC_getval@tmpval,?_ADC_getval
   423  01FFB4  C004  F002         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
   424  01FFB8  0012               	return		;funcret
   425  01FFBA                     __end_of_ADC_getval:
   426                           	callstack 0
   427  0000                     
   428                           	psect	rparam
   429  0000                     
   430                           	psect	idloc
   431                           
   432                           ;Config register IDLOC0 @ 0x200000
   433                           ;	unspecified, using default values
   434  200000                     	org	2097152
   435  200000  0FFF               	dw	4095
   436                           
   437                           ;Config register IDLOC1 @ 0x200002
   438                           ;	unspecified, using default values
   439  200002                     	org	2097154
   440  200002  0FFF               	dw	4095
   441                           
   442                           ;Config register IDLOC2 @ 0x200004
   443                           ;	unspecified, using default values
   444  200004                     	org	2097156
   445  200004  0FFF               	dw	4095
   446                           
   447                           ;Config register IDLOC3 @ 0x200006
   448                           ;	unspecified, using default values
   449  200006                     	org	2097158
   450  200006  0FFF               	dw	4095
   451                           
   452                           ;Config register IDLOC4 @ 0x200008
   453                           ;	unspecified, using default values
   454  200008                     	org	2097160
   455  200008  0FFF               	dw	4095
   456                           
   457                           ;Config register IDLOC5 @ 0x20000A
   458                           ;	unspecified, using default values
   459  20000A                     	org	2097162
   460  20000A  0FFF               	dw	4095
   461                           
   462                           ;Config register IDLOC6 @ 0x20000C
   463                           ;	unspecified, using default values
   464  20000C                     	org	2097164
   465  20000C  0FFF               	dw	4095
   466                           
   467                           ;Config register IDLOC7 @ 0x20000E
   468                           ;	unspecified, using default values
   469  20000E                     	org	2097166
   470  20000E  0FFF               	dw	4095
   471                           
   472                           	psect	config
   473                           
   474                           ;Config register CONFIG1L @ 0x300000
   475                           ;	External Oscillator mode Selection bits
   476                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
   477                           ;	Power-up default value for COSC bits
   478                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
   479  300000                     	org	3145728
   480  300000  AA                 	db	170
   481                           
   482                           ;Config register CONFIG1H @ 0x300001
   483                           ;	unspecified, using default values
   484                           ;	Clock Out Enable bit
   485                           ;	CLKOUTEN = 0x1, unprogrammed default
   486                           ;	Clock Switch Enable bit
   487                           ;	CSWEN = 0x1, unprogrammed default
   488                           ;	Fail-Safe Clock Monitor Enable bit
   489                           ;	FCMEN = 0x1, unprogrammed default
   490  300001                     	org	3145729
   491  300001  FF                 	db	255
   492                           
   493                           ;Config register CONFIG2L @ 0x300002
   494                           ;	unspecified, using default values
   495                           ;	Master Clear Enable bit
   496                           ;	MCLRE = 0x1, unprogrammed default
   497                           ;	Power-up Timer Enable bit
   498                           ;	PWRTE = 0x1, unprogrammed default
   499                           ;	Low-power BOR enable bit
   500                           ;	LPBOREN = 0x1, unprogrammed default
   501                           ;	Brown-out Reset Enable bits
   502                           ;	BOREN = 0x3, unprogrammed default
   503  300002                     	org	3145730
   504  300002  FF                 	db	255
   505                           
   506                           ;Config register CONFIG2H @ 0x300003
   507                           ;	unspecified, using default values
   508                           ;	Brown Out Reset Voltage selection bits
   509                           ;	BORV = 0x3, unprogrammed default
   510                           ;	ZCD Disable bit
   511                           ;	ZCD = 0x1, unprogrammed default
   512                           ;	PPSLOCK bit One-Way Set Enable bit
   513                           ;	PPS1WAY = 0x1, unprogrammed default
   514                           ;	Stack Full/Underflow Reset Enable bit
   515                           ;	STVREN = 0x1, unprogrammed default
   516                           ;	Debugger Enable bit
   517                           ;	DEBUG = 0x1, unprogrammed default
   518                           ;	Extended Instruction Set Enable bit
   519                           ;	XINST = 0x1, unprogrammed default
   520  300003                     	org	3145731
   521  300003  FF                 	db	255
   522                           
   523                           ;Config register CONFIG3L @ 0x300004
   524                           ;	WDT Period Select bits
   525                           ;	WDTCPS = 0x1F, unprogrammed default
   526                           ;	WDT operating mode
   527                           ;	WDTE = OFF, WDT Disabled
   528  300004                     	org	3145732
   529  300004  9F                 	db	159
   530                           
   531                           ;Config register CONFIG3H @ 0x300005
   532                           ;	unspecified, using default values
   533                           ;	WDT Window Select bits
   534                           ;	WDTCWS = 0x7, unprogrammed default
   535                           ;	WDT input clock selector
   536                           ;	WDTCCS = 0x7, unprogrammed default
   537  300005                     	org	3145733
   538  300005  FF                 	db	255
   539                           
   540                           ;Config register CONFIG4L @ 0x300006
   541                           ;	unspecified, using default values
   542                           ;	Write Protection Block 0
   543                           ;	WRT0 = 0x1, unprogrammed default
   544                           ;	Write Protection Block 1
   545                           ;	WRT1 = 0x1, unprogrammed default
   546                           ;	Write Protection Block 2
   547                           ;	WRT2 = 0x1, unprogrammed default
   548                           ;	Write Protection Block 3
   549                           ;	WRT3 = 0x1, unprogrammed default
   550                           ;	Write Protection Block 3
   551                           ;	WRT4 = 0x1, unprogrammed default
   552                           ;	Write Protection Block 3
   553                           ;	WRT5 = 0x1, unprogrammed default
   554                           ;	Write Protection Block 3
   555                           ;	WRT6 = 0x1, unprogrammed default
   556                           ;	Write Protection Block 3
   557                           ;	WRT7 = 0x1, unprogrammed default
   558  300006                     	org	3145734
   559  300006  FF                 	db	255
   560                           
   561                           ;Config register CONFIG4H @ 0x300007
   562                           ;	unspecified, using default values
   563                           ;	Configuration Register Write Protection bit
   564                           ;	WRTC = 0x1, unprogrammed default
   565                           ;	Boot Block Write Protection bit
   566                           ;	WRTB = 0x1, unprogrammed default
   567                           ;	Data EEPROM Write Protection bit
   568                           ;	WRTD = 0x1, unprogrammed default
   569                           ;	Scanner Enable bit
   570                           ;	SCANE = 0x1, unprogrammed default
   571                           ;	Low Voltage Programming Enable bit
   572                           ;	LVP = 0x1, unprogrammed default
   573  300007                     	org	3145735
   574  300007  FF                 	db	255
   575                           
   576                           ;Config register CONFIG5L @ 0x300008
   577                           ;	unspecified, using default values
   578                           ;	UserNVM Program Memory Code Protection bit
   579                           ;	CP = 0x1, unprogrammed default
   580                           ;	DataNVM Memory Code Protection bit
   581                           ;	CPD = 0x1, unprogrammed default
   582  300008                     	org	3145736
   583  300008  FF                 	db	255
   584                           
   585                           ;Config register CONFIG5H @ 0x300009
   586                           ;	unspecified, using default values
   587  300009                     	org	3145737
   588  300009  FF                 	db	255
   589                           
   590                           ;Config register CONFIG6L @ 0x30000A
   591                           ;	unspecified, using default values
   592                           ;	Table Read Protection Block 0
   593                           ;	EBTR0 = 0x1, unprogrammed default
   594                           ;	Table Read Protection Block 1
   595                           ;	EBTR1 = 0x1, unprogrammed default
   596                           ;	Table Read Protection Block 2
   597                           ;	EBTR2 = 0x1, unprogrammed default
   598                           ;	Table Read Protection Block 3
   599                           ;	EBTR3 = 0x1, unprogrammed default
   600                           ;	Table Read Protection Block 4
   601                           ;	EBTR4 = 0x1, unprogrammed default
   602                           ;	Table Read Protection Block 5
   603                           ;	EBTR5 = 0x1, unprogrammed default
   604                           ;	Table Read Protection Block 6
   605                           ;	EBTR6 = 0x1, unprogrammed default
   606                           ;	Table Read Protection Block 7
   607                           ;	EBTR7 = 0x1, unprogrammed default
   608  30000A                     	org	3145738
   609  30000A  FF                 	db	255
   610                           
   611                           ;Config register CONFIG6H @ 0x30000B
   612                           ;	unspecified, using default values
   613                           ;	Boot Block Table Read Protection bit
   614                           ;	EBTRB = 0x1, unprogrammed default
   615  30000B                     	org	3145739
   616  30000B  FF                 	db	255
   617                           tosu	equ	0xFFF
   618                           tosh	equ	0xFFE
   619                           tosl	equ	0xFFD
   620                           stkptr	equ	0xFFC
   621                           pclatu	equ	0xFFB
   622                           pclath	equ	0xFFA
   623                           pcl	equ	0xFF9
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           prodh	equ	0xFF4
   629                           prodl	equ	0xFF3
   630                           indf0	equ	0xFEF
   631                           postinc0	equ	0xFEE
   632                           postdec0	equ	0xFED
   633                           preinc0	equ	0xFEC
   634                           plusw0	equ	0xFEB
   635                           fsr0h	equ	0xFEA
   636                           fsr0l	equ	0xFE9
   637                           wreg	equ	0xFE8
   638                           indf1	equ	0xFE7
   639                           postinc1	equ	0xFE6
   640                           postdec1	equ	0xFE5
   641                           preinc1	equ	0xFE4
   642                           plusw1	equ	0xFE3
   643                           fsr1h	equ	0xFE2
   644                           fsr1l	equ	0xFE1
   645                           bsr	equ	0xFE0
   646                           indf2	equ	0xFDF
   647                           postinc2	equ	0xFDE
   648                           postdec2	equ	0xFDD
   649                           preinc2	equ	0xFDC
   650                           plusw2	equ	0xFDB
   651                           fsr2h	equ	0xFDA
   652                           fsr2l	equ	0xFD9
   653                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      8       8
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_ADC_getval

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0      93
                                              4 COMRAM     4     4      0
                         _ADC_getval
                           _ADC_init
                      _LEDarray_init
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _LEDarray_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      8       8       1        8.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BIGRAM             DE9      0       0      33        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Nov 01 16:40:07 2021

                     l20 FF9A                       l21 FFB8                       l15 FF62  
                     l18 FF8C                       l37 FFF6                       l62 FF88  
                    l801 FF5C                      l803 FF5E                      l805 FF60  
                    l815 FF64                      l945 FF8A                      l961 FFCE  
                    l953 FFBA                      l947 FFA0                      l963 FFF0  
                    l955 FFBE                      l949 FFB0                      l797 FF4A  
                    l957 FFBE                      l799 FF54                      l959 FFC6  
                    u500 FFF0                      u501 FFEC                      u490 FF9A  
                    u491 FF96                      wreg 000FE8      __size_of_ADC_getval 0030  
     main@light_strength 0007                     _main FFBA                     start 0000  
       __end_of_ADC_init FF64             ___param_bank 000000                    ?_main 0001  
                  _ADPCH 000F5F                    status 000FD8          __initialization FF44  
           __end_of_main 0000                   ??_main 0005            __activetblptr 000000  
 __size_of_LEDarray_init 0026                   _ADRESH 000F64             ??_ADC_getval 0003  
                 isa$std 000001                ?_ADC_init 0001       __end_of_ADC_getval FFBA  
             __accesstop 0060  __end_of__initialization FF44            ___rparam_used 000001  
          _LEDarray_init FF64           __pcstackCOMRAM 0001               ??_ADC_init 0001  
         ?_LEDarray_init 0001                _ADREFbits 000F58                  __Hparam 0000  
                __Lparam 0000                  __pcinit FF44                  __ramtop 0E00  
                __ptext0 FFBA                  __ptext1 FF64                  __ptext2 FF4A  
                __ptext3 FF8A     end_of_initialization FF44         ADC_getval@tmpval 0003  
        ??_LEDarray_init 0001                _TRISAbits 000F81                _TRISBbits 000F82  
              _TRISFbits 000F86                _TRISGbits 000F87                _TRISHbits 000F88  
      __size_of_ADC_init 001A      start_initialization FF44                 _ADC_init FF4A  
               _LATAbits 000F79                 _LATBbits 000F7A                 _LATFbits 000F7E  
               _LATGbits 000F7F                 _LATHbits 000F80               _ADCON0bits 000F60  
  __end_of_LEDarray_init FF8A                 __Hrparam 0000               _ADC_getval FF8A  
               __Lrparam 0000               _ANSELAbits 000E92               _ANSELFbits 000EB4  
          __size_of_main 0046                 isa$xinst 000000       main@set_brightness 0005  
            ?_ADC_getval 0001  
